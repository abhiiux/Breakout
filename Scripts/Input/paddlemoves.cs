//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Input/paddlemoves.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Paddlemoves: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Paddlemoves()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""paddlemoves"",
    ""maps"": [
        {
            ""name"": ""paddle gameplay"",
            ""id"": ""6cd7705e-fb20-4841-81ab-17e9fd52bc11"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""57c4e231-84d4-45db-b8fb-f7f9c1c15fc8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""d2b403b1-47c0-44bd-bb79-66cf8dc106fb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0342443f-2661-4a84-bbd5-ffc0a449a02c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1abc16b6-88c4-43fe-8af4-4cb26e096555"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cf9280ef-e155-484e-b88f-aaabd702465e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d3895f43-7865-4637-bce4-dc96eaba7c57"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""12d1589c-5985-4f26-b322-837ca5ceadb9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""06b30d91-d8ea-45a4-96a4-3b041decb8bd"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c704f1cd-068d-493a-8037-e9307d2671c5"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""688e6379-ff2c-4f79-a843-1ca7ed20e734"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b55918a8-0deb-484a-9f3d-45bdb14485b0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // paddle gameplay
        m_paddlegameplay = asset.FindActionMap("paddle gameplay", throwIfNotFound: true);
        m_paddlegameplay_move = m_paddlegameplay.FindAction("move", throwIfNotFound: true);
    }

    ~@Paddlemoves()
    {
        UnityEngine.Debug.Assert(!m_paddlegameplay.enabled, "This will cause a leak and performance issues, Paddlemoves.paddlegameplay.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // paddle gameplay
    private readonly InputActionMap m_paddlegameplay;
    private List<IPaddlegameplayActions> m_PaddlegameplayActionsCallbackInterfaces = new List<IPaddlegameplayActions>();
    private readonly InputAction m_paddlegameplay_move;
    public struct PaddlegameplayActions
    {
        private @Paddlemoves m_Wrapper;
        public PaddlegameplayActions(@Paddlemoves wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_paddlegameplay_move;
        public InputActionMap Get() { return m_Wrapper.m_paddlegameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PaddlegameplayActions set) { return set.Get(); }
        public void AddCallbacks(IPaddlegameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_PaddlegameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PaddlegameplayActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IPaddlegameplayActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IPaddlegameplayActions instance)
        {
            if (m_Wrapper.m_PaddlegameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPaddlegameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_PaddlegameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PaddlegameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PaddlegameplayActions @paddlegameplay => new PaddlegameplayActions(this);
    public interface IPaddlegameplayActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
